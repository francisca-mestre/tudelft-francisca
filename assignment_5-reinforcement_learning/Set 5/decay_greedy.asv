function [normQdecay_mean, normQdecay_var] = decay_greedy
run scenario
run Qiteration
close

gamma = 0.9;
alpha = 0.7; epsilon = 0.9; minepsilon = 0.3;
maxSteps = 100;
% maxInteractions_vector = [1000 10000 100000 200000 300000 400000];
maxIt = 300000; X = 50;
normval2 = zeros(X, maxIt);

for x = 1:X
    count = 0;
    %     for I = 1:maxIt
    Q = zeros(n,4);
    %             iterations = true;
    for in = 1:maxIt
        count = count+1;
        if count > 10
            epsilon = max(minepsilon, epsilon - 0.001);
            count = 1;
        end
        i = 0;
        episode = true;
        s = S;
        while episode
            i = i+1;
            if i <= maxSteps && s~=G
                [~,a] = max(Q(s,:));
                prob = rand;
                if prob < epsilon
                    a = randperm(4,1);
                end
                if a == 1
                    next_s = ssl_left(2,s);
                    if next_s == G
                        r = R_left(s,next_s);
                        Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_left(s,next_s);
                        Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
                        s = next_s;
                    end
                elseif a == 2
                    next_s = ssl_right(2,s);
                    if next_s == G
                        r = R_right(s,next_s);
                        Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_right(s,next_s);
                        Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
                        s = next_s;
                    end
                elseif a == 3
                    next_s = ssl_up(2,s);
                    if next_s == G
                        r = R_up(s,next_s);
                        Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_up(s,next_s);
                        Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
                        s = next_s;
                    end
                elseif a == 4
                    next_s = ssl_down(2,s);
                    if next_s == G
                        r = R_down(s,next_s);
                        Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_down(s,next_s);
                        Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
                        s = next_s;
                    end
                end
            else
                episode = false;
            end
            %             if in <= maxInteractions
            %
            %             else
            %                 iterations = false;
            %                 episode = false;
            %             end
        end
        %             Qstar = max(Q,[],2);
        %             if ~isequal(Q,zeros(size(Q))) && norm(Qstar-V) < 0.001
        %                 iterations = false;
        %             end
        [V3, ~] = max(Q,[],2);
        normval2(x,in) = norm(V3-V,2);
    end
end
normQdecay_mean = mean(normval2); normQdecay_mean = normQdecay_mean(100:end);
normQdecay_var = var(normval2); normQdecay_var = normQdecay_var(100:end);
end




% function [normQdecay_mean, normQdecay_var] = decay_greedy
% run scenario
% run Qiteration
%
% gamma = 0.9;
% alpha = 0.7; epsilon = 0.9; minepsilon = 0.1;
% maxSteps = 100;
% % maxInteractions_vector = [1000 10000 100000 200000 300000 400000];
% maxIt = 500000;
% normval2 = zeros(2, length(maxInteractions_vector));
%
% for x = 1:2
%     in = 0; count = 0;
%     for I = 1:length(maxInteractions_vector)
%         Q = zeros(n,4);
%         maxInteractions = maxInteractions_vector(I);
%         iterations = true;
%         while iterations
%             count = count+1;
%             if count > 10
%                 epsilon = max(minepsilon, epsilon - 0.001);
%                 count = 0;
%             end
%             i = 0;
%             episode = true;
%             s = S;
%             %             s = 52;
%             while episode
%                 i = i+1; in = in+1;
%                 if i <= maxSteps && s~=G
%                     [~,a] = max(Q(s,:));
%                     prob = rand;
%                     if prob < epsilon
%                         a = randperm(4,1);
%                     end
%                     if a == 1
%                         next_s = ssl_left(2,s);
%                         if next_s == G
%                             r = R_left(s,next_s);
%                             Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
%                             s = next_s;
%                         elseif next_s == s
%
%                         else
%                             r = R_left(s,next_s);
%                             Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
%                             s = next_s;
%                         end
%                     elseif a == 2
%                         next_s = ssl_right(2,s);
%                         if next_s == G
%                             r = R_right(s,next_s);
%                             Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
%                             s = next_s;
%                         elseif next_s == s
%
%                         else
%                             r = R_right(s,next_s);
%                             Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
%                             s = next_s;
%                         end
%                     elseif a == 3
%                         next_s = ssl_up(2,s);
%                         if next_s == G
%                             r = R_up(s,next_s);
%                             Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
%                             s = next_s;
%                         elseif next_s == s
%
%                         else
%                             r = R_up(s,next_s);
%                             Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
%                             s = next_s;
%                         end
%                     elseif a == 4
%                         next_s = ssl_down(2,s);
%                         if next_s == G
%                             r = R_down(s,next_s);
%                             Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
%                             s = next_s;
%                         elseif next_s == s
%
%                         else
%                             r = R_down(s,next_s);
%                             Q(s,a) = Q(s,a) + alpha*(r+gamma*(max(Q(next_s,:)))-Q(s,a));
%                             s = next_s;
%                         end
%                     end
%                 else
%                     episode = false;
%                 end
%                 if in <= maxInteractions
%
%                 else
%                     iterations = false;
%                     episode = false;
%                 end
%             end
%             %             Qstar = max(Q,[],2);
%             %             if ~isequal(Q,zeros(size(Q))) && norm(Qstar-V) < 0.001
%             %                 iterations = false;
%             %             end
%         end
%         [V3, ~] = max(Q,[],2);
%         normval2(x,I) = norm(V3-V,2);
%     end
% end
% normQdecay_mean = mean(normval2);
% normQdecay_var = var(normval2);
% end