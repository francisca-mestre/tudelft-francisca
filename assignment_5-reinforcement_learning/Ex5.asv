%% Implementation of the scenario

% STATE SPACE
n = 63; % number of states
nrows = 9; ncol = 7;
S = 13; % start state
G = 53; % goal state
grey_states = [1:7, 8, 14, 15, 17, 18, 20, 21, 22, 28, 29, 31:33, 35, 36, 42, 43, 45, 46, 48, 49, 50, 56, 57:63];
n_activestates = n-length(grey_states);

% TRANSITIONS - DETERMINISTIC
ssl_left = zeros(2,n); ssl_right = zeros(2,n); ssl_up = zeros(2,n); ssl_down = zeros(2,n);

P_left = zeros(63); P_right = zeros(63); P_up = zeros(63); P_down = zeros(63);

% action - left(1)
for i = 1:nrows %go over all rows
    for s = 1+(i-1)*ncol:7+(i-1)*ncol % s = current state
        if ismember(s, grey_states)
            next_s = s;
        else
            next_s = s-1;
            if ~ismember(s, grey_states) && ~ismember(next_s, grey_states)
                P_left(s, next_s) = 1;
            elseif ~ismember(s, grey_states) && ismember(next_s, grey_states)
                P_left(s, s) = 1;
                next_s = s;
            end
        end
        ssl_left(:,s) = [s; next_s];
    end
end
P_left(G,:) = zeros(1,size(P_left,2));

% action - right(2)
for i = 1:nrows %go over all rows
    for s = 1+(i-1)*ncol:7+(i-1)*ncol % s = current state
        if ismember(s, grey_states)
            next_s = s;
        else
            next_s = s+1;
            if ~ismember(s, grey_states) && ~ismember(next_s, grey_states)
                P_right(s, next_s) = 1;
            elseif ~ismember(s, grey_states) && ismember(next_s, grey_states)
                P_right(s, s) = 1;
                next_s = s;
            end
        end
        ssl_right(:,s) = [s; next_s];
    end
end
P_right(G,:) = zeros(1,size(P_right,2));

% action - up(3)
for i = 1:nrows %go over all rows
    for s = 1+(i-1)*ncol:7+(i-1)*ncol % s = current state
        if ismember(s, grey_states)
            next_s = s;
        else
            next_s = s+ncol;
            if ~ismember(s, grey_states) && ~ismember(next_s, grey_states)
                P_up(s, next_s) = 1;
            elseif ~ismember(s, grey_states) && ismember(next_s, grey_states)
                P_up(s, s) = 1;
                next_s = s;
            end
        end
        ssl_up(:,s) = [s; next_s];
    end
end
P_up(G,:) = zeros(1,size(P_up,2));

% action - down(4)
for i = 1:nrows %go over all rows
    for s = 1+(i-1)*ncol:7+(i-1)*ncol % s = current state
        if ismember(s, grey_states)
            next_s = s;
        else
            next_s = s-ncol;
            if ~ismember(s, grey_states) && ~ismember(next_s, grey_states)
                P_down(s, next_s) = 1;
            elseif ~ismember(s, grey_states) && ismember(next_s, grey_states)
                P_down(s, s) = 1;
                next_s = s;
            end
        end
        ssl_down(:,s) = [s; next_s];
    end
end
P_down(G,:) = zeros(1,size(P_down,2));

% REWARDS
R_left = zeros(63); R_right = zeros(63); R_up = zeros(63); R_down = zeros(63);
R_left(:,G) = ones(n,1); R_right(:,G) = ones(n,1); R_up(:,G) = ones(n,1); R_down(:,G) = ones(n,1);
R_left(G,G) = 0; R_right(G,G) = 0; R_up(G,G) = 0; R_down(G,G) = 0;


%% Q-iteration

I = 100; % nº of max iterations
Q_left = zeros(n,I+1); Q_right = zeros(n,I+1); Q_up = zeros(n,I+1); Q_down = zeros(n,I+1);
gamma = 0.9;

% s = S; % initial state
for i = 1:I
    % action - left(1)
    for s = 1:n
        next_s = ssl_left(2,s);
        [vali,a] = max([Q_left(next_s,i),Q_right(next_s,i),Q_up(next_s,i),Q_down(next_s,i)]);
        Q_left(s,i+1) =  P_left(s,next_s)*(R_left(s, next_s) + gamma*vali);
    end
    
    % action - right(2)
    for s = 1:n
        next_s = ssl_right(2,s);
        [vali,a] = max([Q_left(next_s,i),Q_right(next_s,i),Q_up(next_s,i),Q_down(next_s,i)]);
        Q_right(s,i+1) =  P_right(s,next_s)*(R_right(s, next_s) + gamma*vali);
    end
    
    % action - up(3)
    for s = 1:n
        next_s = ssl_up(2,s);
        [vali,a] = max([Q_left(next_s,i),Q_right(next_s,i),Q_up(next_s,i),Q_down(next_s,i)]);
        Q_up(s,i+1) =  P_up(s,next_s)*(R_up(s, next_s) + gamma*vali);
    end
    
    % action - down(4)
    for s = 1:n
        next_s = ssl_down(2,s);
        [vali,a] = max([Q_left(next_s,i),Q_right(next_s,i),Q_up(next_s,i),Q_down(next_s,i)]);
        Q_down(s,i+1) = P_down(s,next_s)*(R_down(s, next_s) + gamma*vali);
    end
end

V = zeros(n,1); pi = zeros(n,1);
for s = 1:n
    [V(s), pi(s)] = max([Q_left(s,end), Q_right(s,end), Q_up(s,end), Q_down(s,end)]);
end
maze_figure2(V, pi)

%% Problem 2
I = 100; % nº of max iterations
Q_left = zeros(n,I+1); Q_right = zeros(n,I+1); Q_up = zeros(n,I+1); Q_down = zeros(n,I+1);
g = [0 0.1 0.5 1];

% s = S; % initial state
for k = 1:length(g)
    gamma = g(k);
    for i = 1:I
        % action - left(1)
        for s = 1:n
            next_s = ssl_left(2,s);
            [vali,a] = max([Q_left(next_s,i),Q_right(next_s,i),Q_up(next_s,i),Q_down(next_s,i)]);
            Q_left(s,i+1) =  P_left(s,next_s)*(R_left(s, next_s) + gamma*vali);
        end
        
        % action - right(2)
        for s = 1:n
            next_s = ssl_right(2,s);
            [vali,a] = max([Q_left(next_s,i),Q_right(next_s,i),Q_up(next_s,i),Q_down(next_s,i)]);
            Q_right(s,i+1) =  P_right(s,next_s)*(R_right(s, next_s) + gamma*vali);
        end
        
        % action - up(3)
        for s = 1:n
            next_s = ssl_up(2,s);
            [vali,a] = max([Q_left(next_s,i),Q_right(next_s,i),Q_up(next_s,i),Q_down(next_s,i)]);
            Q_up(s,i+1) =  P_up(s,next_s)*(R_up(s, next_s) + gamma*vali);
        end
        
        % action - down(4)
        for s = 1:n
            next_s = ssl_down(2,s);
            [vali,a] = max([Q_left(next_s,i),Q_right(next_s,i),Q_up(next_s,i),Q_down(next_s,i)]);
            Q_down(s,i+1) = P_down(s,next_s)*(R_down(s, next_s) + gamma*vali);
        end
    end
    
    V2 = zeros(n,1); pi = zeros(n,1);
    for s = 1:n
        [V2(s), pi(s)] = max([Q_left(s,end), Q_right(s,end), Q_up(s,end), Q_down(s,end)]);
    end
    maze_figure(V2)
end

%% Q-learning

gamma = 0.9;
alpha = 0.5; epsilon = 0.3;
maxSteps = 100; maxI= 100000; 
Q_left = zeros(n,1); Q_right = zeros(n,1); Q_up = zeros(n,1); Q_down = zeros(n,1);

in = 0;
iterations = true;
while iterations
    in = in+1;
    if in <= maxI
        i = 0;
        episode = true;
        s = S;
        %             s = 52;
        while episode
            i = i+1;
            if i <= maxSteps && s~=G
                Q = [Q_left(s,end),Q_right(s,end),Q_up(s,end),Q_down(s,end)];
                [vali,a] = max(Q);
                prob = rand;
                if prob < epsilon
                    a = randperm(4,1);
                end
                if a == 1
                    next_s = ssl_left(2,s);
                    if next_s == G
                        r = R_left(s,next_s);
                        Q_left(s) = Q_left(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_left(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_left(s,next_s);
                        Q_left(s) = Q_left(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_left(s));
                        s = next_s;
                    end
                elseif a == 2
                    next_s = ssl_right(2,s);
                    if next_s == G
                        r = R_right(s,next_s);
                        Q_right(s) = Q_right(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_right(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_right(s,next_s);
                        Q_right(s) = Q_right(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_right(s));
                        s = next_s;
                    end
                elseif a == 3
                    next_s = ssl_up(2,s);
                    if next_s == G
                        r = R_up(s,next_s);
                        Q_up(s) = Q_up(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_up(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_up(s,next_s);
                        Q_up(s) = Q_up(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_up(s));
                        s = next_s;
                    end
                elseif a == 4
                    next_s = ssl_down(2,s);
                    if next_s == G
                        r = R_down(s,next_s);
                        Q_down(s) = Q_down(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_down(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_down(s,next_s);
                        Q_down(s) = Q_down(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_down(s));
                        s = next_s;
                    end
                end
            else
                episode = false;
            end
        end
    else
        iterations = false;
    end
end
V3 = zeros(n,1); pi = zeros(n,1);
for s = 1:n
    [V3(s), pi(s)] = max([Q_left(s), Q_right(s), Q_up(s), Q_down(s)]);
end
maze_figure2(V3,pi)
normval2 = norm(V3-V,2);


%% Problem 3
% Q-learning

gamma = 0.9;
% alpha = 0.5; epsilons = [0.1 0.3 0.5 0.7 0.9];
epsilon = 0.3; alphas = [0.1 0.3 0.5 0.7 0.9];

maxSteps = 100; maxInteractions_vector = [100 1000 10000 100000 200000 300000 400000]; %500000;
normval2 = zeros(100, length(maxInteractions_vector));

for eps = 1:length(alphas)
    alpha = alphas(eps);
    for x = 1:100
        Q_left = zeros(n,1); Q_right = zeros(n,1); Q_up = zeros(n,1); Q_down = zeros(n,1);
        for I = 1:length(maxInteractions_vector)
            maxInteractions = maxInteractions_vector(I);
            in = 0;
            iterations = true;
            while iterations
                in = in+1;
                if in <= maxInteractions
                    i = 0;
                    episode = true;
                    s = S;
                    %             s = 52;
                    while episode
                        i = i+1;
                        if i <= maxSteps && s~=G
                            Q = [Q_left(s),Q_right(s),Q_up(s),Q_down(s)];
                            [vali,a] = max(Q);
                            prob = rand;
                            if prob < epsilon
                                a = randperm(4,1);
                            end
                            if a == 1
                                next_s = ssl_left(2,s);
                                if next_s == G
                                    r = R_left(s,next_s);
                                    Q_left(s) = Q_left(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_left(s));
                                    %                             episode = false;
                                    s = next_s;
                                elseif next_s == s
                                    
                                else
                                    r = R_left(s,next_s);
                                    Q_left(s) = Q_left(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_left(s));
                                    s = next_s;
                                end
                            elseif a == 2
                                next_s = ssl_right(2,s);
                                if next_s == G
                                    r = R_right(s,next_s);
                                    Q_right(s) = Q_right(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_right(s));
                                    %                             episode = false;
                                    s = next_s;
                                elseif next_s == s
                                    
                                else
                                    r = R_right(s,next_s);
                                    Q_right(s) = Q_right(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_right(s));
                                    s = next_s;
                                end
                            elseif a == 3
                                next_s = ssl_up(2,s);
                                if next_s == G
                                    r = R_up(s,next_s);
                                    Q_up(s) = Q_up(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_up(s));
                                    %                             episode = false;
                                    s = next_s;
                                elseif next_s == s
                                    
                                else
                                    r = R_up(s,next_s);
                                    Q_up(s) = Q_up(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_up(s));
                                    s = next_s;
                                end
                            elseif a == 4
                                next_s = ssl_down(2,s);
                                if next_s == G
                                    r = R_down(s,next_s);
                                    Q_down(s) = Q_down(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_down(s));
                                    %                             episode = false;
                                    s = next_s;
                                elseif next_s == s
                                    
                                else
                                    r = R_down(s,next_s);
                                    Q_down(s) = Q_down(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_down(s));
                                    s = next_s;
                                end
                            end
                        else
                            episode = false;
                        end
                    end
                else
                    iterations = false;
                end
            end
            V3 = zeros(n,1); pi = zeros(n,1);
            for s = 1:n
                [V3(s), pi(s)] = max([Q_left(s), Q_right(s), Q_up(s), Q_down(s)]);
            end
            %     maze_figure(V3)
            normval2(x,I) = norm(V3-V,2);
            
        end
    end
    normval2 = mean(normval2);
    % figure
    plot(maxInteractions_vector,normval2,'-o'), hold on
end
xlabel('Number of interactions with the environment'), ylabel('2-norm')


%% Problem 4

%% negative reward for each step
% R_left = zeros(63); R_right = zeros(63); R_up = zeros(63); R_down = zeros(63);
% R_left(:,G) = 10*ones(n,1); R_right(:,G) = 10*ones(n,1); R_up(:,G) = 10*ones(n,1); R_down(:,G) = 10*ones(n,1);
% R_left(G,G) = 0; R_right(G,G) = 0; R_up(G,G) = 0; R_down(G,G) = 0;
% for s = 1:63
%    if ismember(s,grey_states)
%       R_left(:,s) = -0.5; R_right(:,s) = -0.5; R_up(:,s) = -0.5; R_down(:,s) = -0.5;
%    end
% end
R_left = zeros(63); R_right = zeros(63); R_up = zeros(63); R_down = zeros(63);
R_left(:,G) = ones(n,1); R_right(:,G) = ones(n,1); R_up(:,G) = ones(n,1); R_down(:,G) = ones(n,1);
R_left(G,G) = 0; R_right(G,G) = 0; R_up(G,G) = 0; R_down(G,G) = 0;

gamma = 0.9;
alpha = 0.5; epsilon = 0.3;
maxSteps = 100; maxI= 100000; 
Q_left = zeros(n,1); Q_right = zeros(n,1); Q_up = zeros(n,1); Q_down = zeros(n,1);

in = 0;
iterations = true;
while iterations
    in = in+1;
    if in <= maxI
        i = 0;
        episode = true;
        s = S;
        %             s = 52;
        while episode
            i = i+1;
            if i <= maxSteps && s~=G
                Q = [Q_left(s,end),Q_right(s,end),Q_up(s,end),Q_down(s,end)];
                [vali,a] = max(Q);
                prob = rand;
                if prob < epsilon
                    a = randperm(4,1);
                end
                if a == 1
                    next_s = ssl_left(2,s);
                    if next_s == G
                        r = R_left(s,next_s);
                        Q_left(s) = Q_left(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_left(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_left(s,next_s);
                        Q_left(s) = Q_left(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_left(s));
                        s = next_s;
                    end
                elseif a == 2
                    next_s = ssl_right(2,s);
                    if next_s == G
                        r = R_right(s,next_s);
                        Q_right(s) = Q_right(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_right(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_right(s,next_s);
                        Q_right(s) = Q_right(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_right(s));
                        s = next_s;
                    end
                elseif a == 3
                    next_s = ssl_up(2,s);
                    if next_s == G
                        r = R_up(s,next_s);
                        Q_up(s) = Q_up(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_up(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_up(s,next_s);
                        Q_up(s) = Q_up(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_up(s));
                        s = next_s;
                    end
                elseif a == 4
                    next_s = ssl_down(2,s);
                    if next_s == G
                        r = R_down(s,next_s);
                        Q_down(s) = Q_down(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_down(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_down(s,next_s);
                        Q_down(s) = Q_down(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_down(s));
                        s = next_s;
                    end
                end
            else
                episode = false;
            end
        end
    else
        iterations = false;
    end
end
V3 = zeros(n,1); pi = zeros(n,1);
for s = 1:n
    [V3(s), pi(s)] = max([Q_left(s), Q_right(s), Q_up(s), Q_down(s)]);
end
maze_figure2(V3,pi)
normval2 = norm(V3-V,2);

%% Q-lambda

gamma = 0.9;
alpha = 0.5; epsilon = 0.3;
maxSteps = 100; maxI= 100000; 
Q_left = zeros(n,1); Q_right = zeros(n,1); Q_up = zeros(n,1); Q_down = zeros(n,1);
e_left = zeros(n,1); e_right = zeros(n,1); e_up = zeros(n,1); e_down = zeros(n,1);

in = 0;
iterations = true;
while iterations
    in = in+1;
    if in <= maxI
        i = 0;
        episode = true;
        s = S; a = 1;
        while episode
            i = i+1;
            if i <= maxSteps && s~=G
                if a == 1
                    next_s = ssl_left(2,s);
                    if next_s == G
                        r = R_left(s,next_s);
                        Qa = Q_left(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_left(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_left(s,next_s);
                        Qa = Q_left(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_left(s));
                        s = next_s;
                    end
                elseif a == 2
                    next_s = ssl_right(2,s);
                    if next_s == G
                        r = R_right(s,next_s);
                        Qa = Q_right(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_right(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_right(s,next_s);
                        Qa = Q_right(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_right(s));
                        s = next_s;
                    end
                elseif a == 3
                    next_s = ssl_up(2,s);
                    if next_s == G
                        r = R_up(s,next_s);
                        Qa = Q_up(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_up(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        r = R_up(s,next_s);
                        Qa = Q_up(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_up(s));
                        s = next_s;
                    end
                elseif a == 4
                    next_s = ssl_down(2,s);
                    r = R_down(s,next_s);
                    if next_s == G
                        Qa = Q_down(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_down(s));
                        %                             episode = false;
                        s = next_s;
                    elseif next_s == s
                        
                    else
                        Qa = Q_down(s) + alpha*(r+gamma*(max([Q_left(next_s), Q_right(next_s), Q_up(next_s), Q_down(next_s)]))-Q_down(s));
                        s = next_s;
                    end
                end
                Q = [Q_left(next_s,end),Q_right(next_s,end),Q_up(next_s,end),Q_down(next_s,end)];
                [~,aprime] = max(Q);
                prob = rand;
                if prob < epsilon
                    aprime = randperm(4,1);
                end
                Qb = [Q_left(next_s,end),Q_right(next_s,end),Q_up(next_s,end),Q_down(next_s,end)];
                [vali, astar] = max(Qb); c = find(Qb==vali);
                if ismember(aprime,c)
                    astar = aprime;
                end
            else
                episode = false;
            end
            
            delta = r + gamma*
        end
    else
        iterations = false;
    end
end
V3 = zeros(n,1); pi = zeros(n,1);
for s = 1:n
    [V3(s), pi(s)] = max([Q_left(s), Q_right(s), Q_up(s), Q_down(s)]);
end
maze_figure2(V3,pi)
normval2 = norm(V3-V,2);